//1. В одномерном массиве целых чисел определить 2 наименьших элемента(м.б.равны между собой)
//2. Вычислить сумму модулей элементов массива, расположенных сразу после первого отрицательного элемента.
//3. Найти сумму всех цифр целочисленного массива.
//4. Необходимо сократить массив, удалив из него все элементы, величина которая находится между(а, в)
//5.Заполнить массив отрицательными и положительными числами в диапазоне от - 1000 до 1000, т.о, чтобы все числа были разными по модулю, и найти наибольшее число.
#include"stdafx.h"
#include<iostream>
using namespace std;
void main()
{
	setlocale(LC_ALL, "Russian");
	int mas[100];//исходный массив
	int min1, min2,k;// к-запоминает индекс массива, который содержит минимальный элемент.
	//заполняем массив рандомными числами 
	for (int i = 0; i < 100;i++)
	{
		mas[i] = rand() % (1000 - (-1000) + 1) - 1000;

	}
	min1 = mas[0];
	min2 = mas[0];
	//1.
	//поиск первого минимального элемента
	for (int i = 0; i < 100; i++)
	{
		if (mas[i] < min1)
		{
			min1 = mas[i];
			k = i;
		}
    }
	//поиск второго минимального элемента 
	for (int i = 0; i < 100;i++)
	{
		if (mas[i] < min2)
		{
			if (i == k)
			i++;
			else
			min2 = mas[i];
				
			
		}
		
	}
	cout <<"два наименьших элемента массива: "<< min1<<" " << min2<<"\n";

	//2.
	int sum;//сумма модулей 
	//поиск суммы модулей двух чисел, которые идут вслед за первым отрицательным 
	for (int i = 0; i < 100; i++)
	{
		if (mas[i] < 0)
		{
			sum = abs(mas[i + 1]) + abs(mas[i + 2]);
			break;
		}
	}
	cout <<"Cуммa модулей элементов массива, расположенных сразу после первого отрицательного элемента: " <<sum<<"\n";

	//3.
	int sumz=0;//сумма всех цифр массива 
	//поиск суммы  всех цифр массива
	for (int i = 0;i < 100;i++)
	{
		
			k =mas[i];// для того, чтобы исходный массив не менялся, используем переменную, которая запоминаетзначение массива по данному индексу
			while (k != 0)
			{
				sumz = sumz + abs(k % 10);
				k = k / 10;
			}
	
	}
	cout << "Cуммa всех цифр целочисленного массива: " << sumz << "\n";

	//4.
	int a, b;//начало и конец интервала соответственно
	cout << "Введите два числа, задающих промежуток, который необходимо удалить: " << "\n";
	cin >> a >> b;
	k = 100; //теперь это размер массива, который будет меняться в результате удаления единиц массива 
	//защита от дурака 
	if (a < -1000 || b>1000)
		cout << "Получившийся массив будет равен нулю, так как исходный массив содержит числа в диапозоне [-1000,1000]" << "\n";

	
	//удаление элементов массива, пренадлежащих данному диапазону 
	else
	{
		for (int i = 0; i < k; i++)
		{
			if (mas[i] >= a && mas[i] <= b) //условие удаления
			{
				k--;//размер уменьшается на единицу
				for (int j = i;j < k;j++)
					mas[j] = mas[j + 1]; //все остальные равны предыдущему 
				i--; //и опять рассматриваем с этого индекса 

			}
		}
	}
	cout << "Массив, получившийся в результате удаления чисел, пренадлежащих промежутку (а,в): ";
	for (int i = 0; i < k; i++)
		cout << mas[i] << " ";

	//5.
	int mas1[100]; //новый массив для генирации по заданному условию
	
	// цикл генерирует случайные числа 
	for (int i = 0; i < 100;i++) 
	{
		mas1[i] = rand() % (1000 - (-1000) + 1) - 1000;
		for (int j = 0; j < i;j++)
		{
			if (abs(mas1[i]) == abs(mas1[j])) //если модуль получившегося числа равен модулю какому-то из ранее найденых
				mas1[i] = mas1[i] + 1;
			if (mas1[i] > 1000 || mas1[i] < 1000)//защита от дурака
				mas1[i] = mas1[i] - 2;
		}
	
	}
	//проверка на правильность полученного массива 
	/*for (int i = 0; i < 100; i++)
		cout << mas[i] << " ";*/
	int max; //максимальный элемент
	max = mas1[0];
	for (int i = 0; i < 100;i++)
	{
		if (mas1[i] > max)
			max = mas1[i];

	}
	cout << "Наибольший элемент массива, в котором все числа разные по модулю и пренадлежат промежутку от -1000 до 1000: " << max << "\n";
	system("pause");
}